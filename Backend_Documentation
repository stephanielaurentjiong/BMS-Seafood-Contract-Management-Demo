# üìö **DAY 1 LEARNING SUMMARY - Backend Development**

## **üèóÔ∏è What We Built: Complete Authentication API**

---

## **üìÅ Project Structure Created**

```
ContractManagement_BMS/
‚îî‚îÄ‚îÄ backend/
    ‚îú‚îÄ‚îÄ .env                    # Environment variables (secrets)
    ‚îú‚îÄ‚îÄ package.json           # Project dependencies list
    ‚îú‚îÄ‚îÄ server.js             # Main server file
    ‚îî‚îÄ‚îÄ src/
        ‚îú‚îÄ‚îÄ config/
        ‚îÇ   ‚îú‚îÄ‚îÄ database.js   # Database connection
        ‚îÇ   ‚îî‚îÄ‚îÄ schema.sql    # Database tables
        ‚îú‚îÄ‚îÄ controllers/
        ‚îÇ   ‚îî‚îÄ‚îÄ userController.js  # User logic
        ‚îî‚îÄ‚îÄ routes/
            ‚îî‚îÄ‚îÄ auth.js       # API endpoints
```

---

## **üîß Key Files & Their Purpose**

### **1. `.env` File - Environment Variables**
```
DB_HOST=localhost
DB_PORT=5432
DB_NAME=shrimp_contracts
DB_USER=stephanielaurentjiong
DB_PASSWORD=
JWT_SECRET=shrimp-contract-super-secret-key...
```

**What it does**: Stores sensitive information (database passwords, secret keys)  
**Why we need it**: Keeps secrets out of code, different settings for dev/production  
**Learning**: Never put passwords directly in code!

---

### **2. `package.json` - Project Dependencies**
```json
{
  "dependencies": {
    "express": "Web server framework",
    "cors": "Allows frontend to talk to backend", 
    "dotenv": "Reads .env files",
    "bcryptjs": "Password hashing (security)",
    "jsonwebtoken": "Authentication tokens",
    "pg": "PostgreSQL database driver"
  }
}
```

**What it does**: Lists all the external libraries our project needs  
**Why we need it**: Like a shopping list - tells npm what to install  
**Learning**: Modern apps use many small, specialized libraries

---

### **3. `server.js` - Main Server**
```javascript
const express = require('express');  // Import web framework
const app = express();              // Create web server
const PORT = 3001;                  // Server runs on port 3001

app.use(express.json());            // Understand JSON requests
app.get('/', (req, res) => {...});  // Handle GET requests to /
app.listen(PORT, () => {...});      // Start listening for requests
```

**What it does**: Creates a web server that listens for HTTP requests  
**Why we need it**: Your frontend needs something to talk to  
**Learning**: Express.js makes web servers easy - handles routing, requests, responses

---

### **4. `src/config/database.js` - Database Connection**
```javascript
const { Pool } = require('pg');     // PostgreSQL connection pool
const pool = new Pool({...});      // Create connection pool
module.exports = pool;              // Export for other files to use
```

**What it does**: Manages connections to PostgreSQL database  
**Why we need it**: Database connections are expensive - pool reuses them  
**Learning**: Connection pooling = efficiency (like sharing taxis vs everyone driving)

---

### **5. `src/config/schema.sql` - Database Tables**
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(50) CHECK (role IN ('ceo', 'supplier', 'administrator'))
);
```

**What it does**: Defines the structure of our database tables  
**Why we need it**: Database needs to know what data to store and how  
**Learning**: 
- **UUID**: Unique identifier (better than simple numbers)
- **UNIQUE**: No duplicate emails allowed
- **CHECK**: Only allows specific roles
- **NOT NULL**: Field is required

---

### **6. `src/controllers/userController.js` - Business Logic**
```javascript
const register = async (req, res) => {
  // 1. Get user data from request
  const { email, name, password, role } = req.body;
  
  // 2. Check if user already exists
  const userExists = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
  
  // 3. Hash the password (security!)
  const hashedPassword = await bcrypt.hash(password, salt);
  
  // 4. Save to database
  const result = await pool.query('INSERT INTO users...');
  
  // 5. Create JWT token
  const token = generateToken(user.id);
  
  // 6. Send response
  res.json({ token, user });
};
```

**What it does**: Contains the business logic for user registration/login  
**Why we need it**: Separates "what to do" from "how to receive requests"  
**Learning**:
- **Password Hashing**: Never store plain passwords!
- **JWT Tokens**: Like a temporary ID card for authentication
- **SQL Injection Protection**: Using `$1, $2` prevents hackers
- **async/await**: Handles database operations that take time

---

### **7. `src/routes/auth.js` - API Endpoints**
```javascript
const router = express.Router();
router.post('/register', register);  // POST /api/auth/register
router.post('/login', login);        // POST /api/auth/login
```

**What it does**: Defines which URLs trigger which functions  
**Why we need it**: Organizes your API - like a table of contents  
**Learning**: RESTful APIs use HTTP methods (GET, POST, PUT, DELETE)

---

## **üîê Security Concepts We Implemented**

### **Password Hashing with bcryptjs**
```javascript
const salt = await bcrypt.genSalt(10);
const hashedPassword = await bcrypt.hash(password, salt);
```
**What it does**: Converts "password123" ‚Üí "unreadable gibberish"  
**Why**: If someone steals your database, they can't read passwords  
**Learning**: Never store plain text passwords - always hash them!

### **JWT (JSON Web Tokens)**
```javascript
const token = jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '24h' });
```
**What it does**: Creates a temporary "ID card" that proves user is logged in  
**Why**: Stateless authentication - server doesn't need to remember who's logged in  
**Learning**: Like a concert wristband - proves you paid, expires after event

### **Environment Variables**
```javascript
require('dotenv').config();
const secret = process.env.JWT_SECRET;
```
**What it does**: Keeps secrets in separate file (.env)  
**Why**: Code goes on GitHub, secrets don't!  
**Learning**: Never commit passwords to version control

---

## **üóÑÔ∏è Database Concepts We Used**

### **PostgreSQL with JSONB**
**Why PostgreSQL**: 
- Handles complex data (your dynamic shrimp pricing!)
- JSONB stores flexible JSON data
- ACID compliance (reliable for money transactions)
- Excellent for business applications

### **UUID Primary Keys**
```sql
id UUID PRIMARY KEY DEFAULT uuid_generate_v4()
```
**What it does**: Creates unique IDs like "96af8d34-0a0e-4fb2-9ba2..."  
**Why**: Better than 1,2,3... because they're globally unique  
**Learning**: UUIDs prevent ID conflicts when merging databases

### **Connection Pooling**
**What it does**: Reuses database connections instead of creating new ones  
**Why**: Much faster - like sharing rental cars vs buying new ones each time  
**Learning**: Important for performance under load

---

## **üåê API Concepts We Learned**

### **RESTful API Design**
- `GET /api/health` - Check server status
- `POST /api/auth/register` - Create new user
- `POST /api/auth/login` - Authenticate user

**Learning**: REST = predictable URL patterns that make sense

### **HTTP Status Codes**
- `200` - Success
- `201` - Created (new user)
- `400` - Bad request (validation error)
- `401` - Unauthorized
- `500` - Server error

### **CORS (Cross-Origin Resource Sharing)**
```javascript
app.use(cors());
```
**What it does**: Allows your React app (port 3000) to talk to API (port 3001)  
**Why**: Browsers block cross-origin requests by default (security)  
**Learning**: Essential for frontend-backend communication

---

## **üõ†Ô∏è Development Tools We Used**

### **Nodemon**
```json
"scripts": { "dev": "nodemon server.js" }
```
**What it does**: Auto-restarts server when you change code  
**Why**: Saves time - no manual restarting  
**Learning**: Development tools make coding much faster

### **cURL for Testing**
```bash
curl -X POST http://localhost:3001/api/auth/register -H "Content-Type: application/json" -d '{"email":"test@test.com"}'
```
**What it does**: Tests your API from command line  
**Why**: Faster than building frontend first  
**Learning**: Always test APIs before building UI

---

## **üß† Key Programming Concepts**

### **Async/Await**
```javascript
const result = await pool.query('SELECT...');
```
**What it does**: Waits for database operations to complete  
**Why**: Database calls take time - don't freeze the server  
**Learning**: Modern way to handle "things that take time"

### **Module Exports/Imports**
```javascript
// userController.js
module.exports = { register, login };

// server.js  
const { register, login } = require('./userController');
```
**What it does**: Shares code between files  
**Why**: Keeps files organized and manageable  
**Learning**: Like importing functions from a library

### **Middleware**
```javascript
app.use(express.json());  // Parse JSON in requests
app.use(cors());          // Enable cross-origin requests
```
**What it does**: Code that runs before your route handlers  
**Why**: Common functionality (parsing, security) in one place  
**Learning**: Like security checkpoints - everyone goes through them

---

## **üéØ What You Now Understand**

### **Full-Stack Development**
- ‚úÖ **Backend**: API server with database
- üîÑ **Frontend**: React app (coming next)
- üîó **Communication**: JSON over HTTP

### **Database Design**
- ‚úÖ Tables with relationships
- ‚úÖ Data types and constraints
- ‚úÖ Security considerations

### **Authentication Flow**
1. User submits email/password
2. Server checks database
3. Server creates JWT token
4. Frontend stores token
5. Frontend sends token with future requests

### **Development Workflow**
1. Plan API endpoints
2. Create database schema
3. Write business logic
4. Test with cURL
5. Build frontend (next!)

---

## **üèÜ Major Accomplishments Today**

‚úÖ **Professional server setup** with proper folder structure  
‚úÖ **PostgreSQL database** with UUID and JSONB support  
‚úÖ **Secure authentication** with password hashing and JWT  
‚úÖ **RESTful API** following best practices  
‚úÖ **Environment configuration** for different deployments  
‚úÖ **Error handling** and validation  
‚úÖ **Development tools** for efficient coding  

**You've built the foundation of a production-ready web application!** üöÄ
